//
//  UpcomingMoviesInteractorTests.swift
//  PopcornHub
//
//  Created by Diego Escamilla on 02/08/21.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import PopcornHub
import XCTest

class UpcomingMoviesInteractorTests: XCTestCase {
    
    // MARK: Subject under test
    
    var sut: UpcomingMoviesInteractor!
	var presenterSpy: UpcomingMoviesPresenterSpy!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupUpcomingMoviesInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupUpcomingMoviesInteractor() {
        sut = UpcomingMoviesInteractor()
		presenterSpy = UpcomingMoviesPresenterSpy()
		sut.presenter = presenterSpy
    }
    
    // MARK: Tests
	
    func testFetchUpcomingMoviesSuccess() {
        // Given
		sut.worker = UpcomingMoviesWorkerSpy(.Success)
        
        // When
		sut.fetchUpcomingMovies()
        
        // Then
		XCTAssert(presenterSpy.presentUpcomingMoviesCalled)
		XCTAssert(!(presenterSpy.presentUpcomingMoviesResponse?.mediaList.isEmpty ??  true))
		XCTAssertNil(presenterSpy.presentUpcomingMoviesResponse?.error)
    }
	
	func testFetchUpcomingMoviesFailure() {
		// Given
		sut.worker = UpcomingMoviesWorkerSpy(.Failure)
		
		// When
		sut.fetchUpcomingMovies()
		
		// Then
		XCTAssert(presenterSpy.presentUpcomingMoviesCalled)
		XCTAssert(presenterSpy.presentUpcomingMoviesResponse?.mediaList.isEmpty ??  true)
		XCTAssertNotNil(presenterSpy.presentUpcomingMoviesResponse?.error)
	}
	
	func testSelectUpcomingMovie() {
		// Given
		let selectedIndex = 0
		let request = UpcomingMoviesModels.SelectUpcomingMovie.Request(index: selectedIndex)
		let dummiesList = Dummies.Common.getMediaList()
		sut.upcomingMoviesList = dummiesList
		
		// When
		sut.selectUpcomingMovie(request: request)
		
		// Then
		XCTAssert(presenterSpy.presentMovieDetailCalled)
		XCTAssertEqual(sut.selectedMovie.title, dummiesList[selectedIndex].title)
	}
}

// MARK: Test doubles

class UpcomingMoviesPresenterSpy: UpcomingMoviesPresenterInterface {
	var presentUpcomingMoviesCalled = false
	var presentUpcomingMoviesResponse: UpcomingMoviesModels.FetchUpcomingMovies.Response?
	func presentUpcomingMovies(response: UpcomingMoviesModels.FetchUpcomingMovies.Response) {
		presentUpcomingMoviesCalled = true
		presentUpcomingMoviesResponse = response
	}
	
	var presentMovieDetailCalled = false
	func presentMovieDetail() {
		presentMovieDetailCalled = true
	}
}

class UpcomingMoviesWorkerSpy: UpcomingMoviesWorkerInterface {
	public enum WorkerType {
		case Success
		case Failure
	}
	var workerType: WorkerType
	
	init(_ type: WorkerType) {
		workerType = type
	}
	
	func fetchUpcomingMovies(_ request: UpcomingMoviesModels.FetchUpcomingMovies.Request, completion: @escaping (Result<PopularMoviesResponse?, Error>) -> Void) {
		switch workerType {
			case .Success:
				let response = Dummies.Common.getPopularMoviesResponse()
				completion(.success(response))
			case .Failure:
				completion(.failure(Dummies.Common.error))
		}
	}
}
