//
//  PopularMoviesViewControllerTests.swift
//  PopcornHub
//
//  Created by Diego Escamilla on 01/08/21.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import PopcornHub
import XCTest

class PopularMoviesViewControllerTests: XCTestCase {
    
    // MARK: Subject under test
    
    var sut: PopularMoviesViewController!
    var window: UIWindow!
	var interactorSpy: PopularMoviesInteractorSpy!
	var routerSpy: PopularMoviesRouterSpy!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        window = UIWindow()
        setupPopularMoviesViewController()
    }
    
    override func tearDown() {
        window = nil
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPopularMoviesViewController() {
		sut = PopularMoviesViewController(nibName: NibNames.PopularMovies, bundle: nil)
		interactorSpy = PopularMoviesInteractorSpy()
		sut.interactor = interactorSpy
		routerSpy = PopularMoviesRouterSpy()
		sut.router = routerSpy
		loadView()
    }
    
    func loadView() {
        window.addSubview(sut.view)
        RunLoop.current.run(until: Date())
    }
    
    // MARK: Tests
    
    func testViewDidLoad() {
        // When
		loadView()
        
        // Then
		XCTAssert(interactorSpy.fetchPopularMoviesCalled)
    }
    
    func testSelectItem() {
        // Given
		loadView()
		let selectedIndex = 0
		let displayableMediaList = Dummies.Common.displayablePopularMovies
		sut.viewModel = PopularMoviesModels.FetchPopularMovies.ViewModel(displayableMediaList: displayableMediaList)
		sut.popularMediaCollectionView.reloadData()
        
        // When
		sut.collectionView(sut.popularMediaCollectionView, didSelectItemAt: IndexPath(item: selectedIndex, section: 0))
        
        // Then
		XCTAssert(interactorSpy.selectPopularMovieCalled)
    }
	
	func testSearchQuery() {
		// Given
		loadView()
		let query = "query"
		sut.searchTextField.text = query
		
		// When
		sut.didChangeSearchValue(sut.searchTextField as Any)
		
		// Then
		XCTAssert(interactorSpy.fetchSearchMoviesCalled)
		XCTAssertEqual(interactorSpy.fetchSearchMoviesRequest?.searchString, query)
	}
	
	func testDisplyaMovies() {
		// Given
		loadView()
		let displayableMovies = Dummies.Common.displayablePopularMovies
		let viewModel = PopularMoviesModels.FetchPopularMovies.ViewModel(displayableMediaList: displayableMovies)
		
		// When
		sut.displayPopularMovies(popularMoviesViewModel: viewModel)
		
		// Then
		XCTAssertEqual(sut.popularMediaCollectionView.numberOfItems(inSection: 0), displayableMovies.count)
	}
	
	func testDisplyaMovieDetail() {
		// Given
		loadView()
		
		// When
		sut.displayMovieDetail()
		
		// Then
		XCTAssert(routerSpy?.routToMovieDetailCalled ?? false)
	}
}

// MARK: Test doubles

class PopularMoviesInteractorSpy: PopularMoviesInteractorInterface {
	var fetchPopularMoviesCalled = false
	func fetchPopularMovies() {
		fetchPopularMoviesCalled = true
	}
	
	var selectPopularMovieCalled = false
	var selectPopularMovieRequest: PopularMoviesModels.SelectMovie.Request?
	func selectPopularMovie(request: PopularMoviesModels.SelectMovie.Request) {
		selectPopularMovieCalled = true
		selectPopularMovieRequest = request
	}
	
	var fetchSearchMoviesCalled = false
	var fetchSearchMoviesRequest: PopularMoviesModels.SearchMovieDetail.Request?
	func fetchSearchMovies(request: PopularMoviesModels.SearchMovieDetail.Request) {
		fetchSearchMoviesCalled = true
		fetchSearchMoviesRequest = request
	}
}

class PopularMoviesRouterSpy: PopularMoviesRouterInterface, PopularMoviesDataPassing {
	var dataStore: PopularMoviesDataStore?
	var routToMovieDetailCalled = false
	func routToMovieDetail() {
		routToMovieDetailCalled = true
	}
}
