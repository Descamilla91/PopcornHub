//
//  PopularMoviesInteractorTests.swift
//  PopcornHub
//
//  Created by Diego Escamilla on 01/08/21.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

@testable import PopcornHub
import XCTest

class PopularMoviesInteractorTests: XCTestCase {
    
    // MARK: Subject under test
    
    var sut: PopularMoviesInteractor!
	var presenterSpy: PopularMoviesPresenterSpy!
    
    // MARK: Test lifecycle
    
    override func setUp() {
        super.setUp()
        setupPopularMoviesInteractor()
    }
    
    override func tearDown() {
        super.tearDown()
    }
    
    // MARK: Test setup
    
    func setupPopularMoviesInteractor() {
        sut = PopularMoviesInteractor()
		presenterSpy = PopularMoviesPresenterSpy()
		sut.presenter = presenterSpy
    }
    
    // MARK: Tests
	
    func testFetchPopularMovieSuccess() {
        // Given
		sut.worker = PopularMoviesWorkerSpy(.Success)
        
        // When
		sut.fetchPopularMovies()
        
        // Then
		DispatchQueue.main.async {
			XCTAssert(self.presenterSpy.presentPopularMoviesCalled)
		}
    }
	
	func testFetchPopularMovieFailure() {
		// Given
		sut.worker = PopularMoviesWorkerSpy(.Failure)
		
		// When
		sut.fetchPopularMovies()
		
		// Then
		DispatchQueue.main.async {
			XCTAssert(self.presenterSpy.presentPopularMoviesCalled)
			XCTAssertNotNil(self.presenterSpy.presentPopularMoviesResponse?.error)
			XCTAssert(self.presenterSpy.presentPopularMoviesResponse?.mediaList.isEmpty ?? false)
		}
	}
	
	func testFetchMovieSearchSuccess() {
		// Given
		sut.worker = PopularMoviesWorkerSpy(.Success)
		let searchRequest = PopularMoviesModels.SearchMovieDetail.Request(searchString: "searchString")
		
		// When
		sut.fetchSearchMovies(request: searchRequest)
		
		// Then
		DispatchQueue.main.async {
			XCTAssert(self.presenterSpy.presentPopularMoviesCalled)
			XCTAssert(!(self.presenterSpy.presentPopularMoviesResponse?.mediaList.isEmpty ?? true))
			XCTAssertNil(self.presenterSpy.presentPopularMoviesResponse?.error)
		}
	}
	
	func testFetchMovieSearchFailure() {
		// Given
		sut.worker = PopularMoviesWorkerSpy(.Failure)
		let searchRequest = PopularMoviesModels.SearchMovieDetail.Request(searchString: "searchString")
		
		// When
		sut.fetchSearchMovies(request: searchRequest)
		
		// Then
		DispatchQueue.main.async {
			XCTAssert(self.presenterSpy.presentPopularMoviesCalled)
			XCTAssert(self.presenterSpy.presentPopularMoviesResponse?.mediaList.isEmpty ?? false)
			XCTAssertNotNil(self.presenterSpy.presentPopularMoviesResponse?.error)
		}
	}
}

// MARK: Test doubles

class PopularMoviesPresenterSpy: PopularMoviesPresenterInterface {
	var presentPopularMoviesCalled = false
	var presentPopularMoviesResponse: PopularMoviesModels.FetchPopularMovies.Response?
	func presentPopularMovies(response: PopularMoviesModels.FetchPopularMovies.Response) {
		presentPopularMoviesCalled = true
		presentPopularMoviesResponse = response
	}
	
	var presentMovieDetailCalled = false
	func presentMovieDetail() {
		presentMovieDetailCalled = true
	}
}

class PopularMoviesWorkerSpy: PopularMoviesWorkerInterface {
	enum WorkerType {
		case Success
		case Failure
	}
	
	var type: WorkerType
	
	init(_ type: WorkerType) {
		self.type = type
	}
	
	func fetchPopularMovies(request: PopularMoviesModels.FetchPopularMovies.Request, completion: @escaping (Result<PopularMoviesResponse?, Error>) -> Void) {
		switch type {
			case .Success:
				let response = Dummies.Common.getPopularMoviesResponse()
				completion(.success(response))
			case .Failure:
				completion(.failure(Dummies.Common.error))
		}
	}
	
	func fetchCachePopularMovies(completion: @escaping ([MediaResult]) -> Void) {
		let mediaList = Dummies.Common.getMediaList()
		completion(mediaList)
	}
	
	func fetchMovieSearch(request: PopularMoviesModels.SearchMovieDetail.Request, completion: @escaping (Result<PopularMoviesResponse?, Error>) -> Void) {
		switch type {
			case .Success:
				let response = Dummies.Common.getPopularMoviesResponse()
				completion(.success(response))
			case .Failure:
				completion(.failure(Dummies.Common.error))
		}
	}
	
	func savePopularMoviesCache(request: PopularMoviesModels.CachePopularMovies.Request, completion: @escaping (Bool) -> Void) {
		completion(true)
	}
}
