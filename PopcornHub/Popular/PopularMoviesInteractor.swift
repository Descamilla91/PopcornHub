//
//  PopularMoviesInteractor.swift
//  PopcornHub
//
//  Created by Diego Escamilla on 27/07/21.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol PopularMoviesInteractorInterface {
	func fetchPopularMovies()
	func selectPopularMovie(request: PopularMoviesModels.SelectMovie.Request)
	func fetchSearchMovies(request: PopularMoviesModels.SearchMovieDetail.Request)
}

protocol PopularMoviesDataStore {
	var originalPopularList: [MediaResult] { get set }
	var selectedMovie: MediaResult { get set }
}

class PopularMoviesInteractor: PopularMoviesInteractorInterface, PopularMoviesDataStore {
	
	// MARK: - Properties
	
	var presenter: PopularMoviesPresenterInterface?
	var worker: PopularMoviesWorkerInterface = PopularMoviesWorker()
	var originalPopularList = [MediaResult]()
	var searchResultsList = [MediaResult]()
	var cachedMediaResultList = [MediaResult]()
	var isSearching = false
	var currentPage = 1
	var selectedMovie = MediaResult()
	let minStringCount = 3
	
	// MARK: - PopularMoviesInteractorInterface
	
	func fetchPopularMovies() {
		Networkutilty.checkIfIsInternetConnection { hasInternetConnection in
			hasInternetConnection ? self.fetchOnlinePopularMovies() : self.fetchCachedPopularMovies()
		}
	}
	
	func fetchSearchMovies(request: PopularMoviesModels.SearchMovieDetail.Request) {
		guard let searchString = request.searchString,
			  searchString.count >= minStringCount else {
			let response = PopularMoviesModels.FetchPopularMovies.Response(mediaList: originalPopularList)
			presenter?.presentPopularMovies(response: response)
			isSearching = false
			return
		}
		
		Networkutilty.checkIfIsInternetConnection { hasInternet in
			if hasInternet {
				self.searchOnlineMovies(request)
			} else {
				self.searchOfflineMovies(request)
			}
		}
	}
	
	func selectPopularMovie(request: PopularMoviesModels.SelectMovie.Request) {
		guard !originalPopularList.isEmpty else { return }
		selectedMovie = isSearching ? searchResultsList[request.index] : originalPopularList[request.index]
		presenter?.presentMovieDetail()
	}
	
	private func fetchOnlinePopularMovies() {
		let request = PopularMoviesModels.FetchPopularMovies.Request(page: currentPage)
		worker.fetchPopularMovies(request: request) { result in
			var response = PopularMoviesModels.FetchPopularMovies.Response()
			switch result {
				case .success(let popularMoviesResponse):
					let mediaResultList = popularMoviesResponse?.results ?? [MediaResult]()
					self.cachePopularMovies(mediaResultList)
					self.originalPopularList = mediaResultList
					response.mediaList = mediaResultList
				case .failure(let error):
					response.error = error
			}
			self.presenter?.presentPopularMovies(response: response)
		}
	}
	
	private func fetchCachedPopularMovies() {
		worker.fetchCachePopularMovies { cachedMoviesList in
			self.cachedMediaResultList = cachedMoviesList
			let response = PopularMoviesModels.FetchPopularMovies.Response(mediaList: cachedMoviesList)
			self.presenter?.presentPopularMovies(response: response)
		}
	}
	
	private func searchOnlineMovies(_ request: PopularMoviesModels.SearchMovieDetail.Request) {
		worker.fetchMovieSearch(request: request) { result in
			var response = PopularMoviesModels.FetchPopularMovies.Response()
			switch result {
				case .success(let mediaResponse):
					let resultList = mediaResponse?.results ?? [MediaResult]()
					self.searchResultsList = resultList
					self.isSearching = true
					response.mediaList = resultList
				case .failure(let error):
					response.error = error
			}
			self.presenter?.presentPopularMovies(response: response)
		}
	}
	
	private func searchOfflineMovies(_ request: PopularMoviesModels.SearchMovieDetail.Request) {
		isSearching = true
		let query = request.searchString ?? ""
		let offlineSearchResultList = cachedMediaResultList.filter { mediaResult in
			mediaResult.title?.contains(query) ?? false
		}
		let response = PopularMoviesModels.FetchPopularMovies.Response(mediaList: offlineSearchResultList)
		presenter?.presentPopularMovies(response: response)
	}
	
	private func cachePopularMovies(_ mediaList: [MediaResult]) {
		let request = PopularMoviesModels.CachePopularMovies.Request(popularMoviesList: mediaList)
		worker.savePopularMoviesCache(request: request) { didCacheData in
			print(didCacheData as Any)
		}
	}
}
