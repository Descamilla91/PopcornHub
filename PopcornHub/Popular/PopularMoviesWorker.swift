//
//  PopularMoviesWorker.swift
//  PopcornHub
//
//  Created by Diego Escamilla on 27/07/21.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import Alamofire
import CoreData

protocol PopularMoviesWorkerInterface {
	func fetchPopularMovies(request: PopularMoviesModels.FetchPopularMovies.Request, completion: @escaping (Result<PopularMoviesResponse?, Error>) -> Void)
	func fetchCachePopularMovies(completion: @escaping ([MediaResult]) -> Void)
	func fetchMovieSearch(request: PopularMoviesModels.SearchMovieDetail.Request, completion: @escaping (Result<PopularMoviesResponse?, Error>) -> Void)
	func savePopularMoviesCache(request: PopularMoviesModels.CachePopularMovies.Request, completion: @escaping (Bool) -> Void)
}

class PopularMoviesWorker: PopularMoviesWorkerInterface {
	let context = (UIApplication.shared.delegate as? AppDelegate)?.persistentContainer.viewContext
	
	func fetchPopularMovies(request: PopularMoviesModels.FetchPopularMovies.Request, completion: @escaping (Result<PopularMoviesResponse?, Error>) -> Void) {
		let networkRouter = NetworkRouter.PopularMovies(page: request.page)
		AF.request(networkRouter).response { response in
			if let data = response.data {
				do {
					let decoder = JSONDecoder()
					let movieResponse = try decoder.decode(PopularMoviesResponse.self, from: data)
					completion(.success(movieResponse))
				} catch let error {
					completion(.failure(error))
				}
			} else if let error = response.error {
				completion(.failure(error))
			}
		}
	}
	
	func fetchCachePopularMovies(completion: @escaping ([MediaResult]) -> Void) {
		var mediaResultList = [MediaResult]()
		retrieveCachedMovies { manageMediaList in
			mediaResultList = manageMediaList.map { manageMedia -> MediaResult in
				let mediaResult = MediaResult()
				mediaResult.id = Int(manageMedia.id)
				mediaResult.title = manageMedia.title
				mediaResult.originalTitle = manageMedia.originalTitle
				mediaResult.posterPath = manageMedia.posterPath
				mediaResult.backdropPath = manageMedia.backdropPath
				mediaResult.originalLanguage = manageMedia.originalLanguage
				mediaResult.releaseeDate = manageMedia.releaseDate
				mediaResult.voteAverage = manageMedia.voteAverage
				mediaResult.voteCount = Int(manageMedia.voteCount)
				mediaResult.popularity = Float(manageMedia.popularity)
				mediaResult.overview = manageMedia.overview
				mediaResult.mediaType = manageMedia.mediaType
				mediaResult.hasVideo = manageMedia.hasVideo
				mediaResult.hasAdultContent = manageMedia.hasAdultContent
				mediaResult.genreIds = manageMedia.genreIds as? [Int] ?? [Int]()
				return mediaResult
			}
		}
		completion(mediaResultList)
	}
	
	func fetchMovieSearch(request: PopularMoviesModels.SearchMovieDetail.Request, completion: @escaping (Result<PopularMoviesResponse?, Error>) -> Void) {
		let networkRouter = NetworkRouter.MovieDetail(page: 1, searchString: request.searchString ?? "")
		AF.request(networkRouter).response { response in
			if let data = response.data {
				do {
					let decoder = JSONDecoder()
					let movieResponse = try decoder.decode(PopularMoviesResponse.self, from: data)
					completion(.success(movieResponse))
				} catch let error {
					completion(.failure(error))
				}
			} else if let error = response.error {
				completion(.failure(error))
			}
		}
	}
	
	func savePopularMoviesCache(request: PopularMoviesModels.CachePopularMovies.Request, completion: @escaping (Bool) -> Void) {
		cleanCachedMovies {
			self.saveCachedMovies(request)
		}
	}
	
	private func retrieveCachedMovies(completion: @escaping ([ManagedMedia]) -> Void) {
		guard let viewContext = context else { return }
		do {
			let managedCacheMedia = try viewContext.fetch(ManagedMedia.fetchRequest()) as? [ManagedMedia] ?? [ManagedMedia]()
			completion(managedCacheMedia)
		} catch {
			completion([ManagedMedia]())
		}
	}
	
	private func cleanCachedMovies(completion: @escaping () -> Void) {
		guard let viewContext = context else {
			completion()
			return
		}
		retrieveCachedMovies { cachedMovies in
			cachedMovies.forEach { manageMedia in
				viewContext.delete(manageMedia)
			}
		}
		do {
			try viewContext.save()
			completion()
		} catch {
			completion()
		}
	}
	
	private func saveCachedMovies(_ request: PopularMoviesModels.CachePopularMovies.Request) {
		guard let viewContext = context else { return }
		request.popularMoviesList.forEach { media in
			let managedMedia = ManagedMedia(context: viewContext)
			managedMedia.id = Int64(media.id ?? 0)
			managedMedia.title = media.title ?? ""
			managedMedia.originalTitle = media.originalTitle ?? ""
			managedMedia.posterPath = media.posterPath ?? ""
			managedMedia.backdropPath = media.backdropPath ?? ""
			managedMedia.originalLanguage = media.originalLanguage ?? ""
			managedMedia.releaseDate = media.releaseeDate ?? ""
			managedMedia.voteAverage = media.voteAverage ?? 0
			managedMedia.voteCount = Int64(media.voteCount ?? 0)
			managedMedia.popularity = Double(media.popularity ?? 0)
			managedMedia.overview = media.overview ?? ""
			managedMedia.mediaType = media.mediaType ?? ""
			managedMedia.hasVideo = media.hasVideo ?? false
			managedMedia.hasAdultContent = media.hasAdultContent ?? false
			managedMedia.genreIds = media.genreIds?.map { Int64($0) } ?? [Int64]()
			do {
				try viewContext.save()
			} catch {}
		}
	}
}
