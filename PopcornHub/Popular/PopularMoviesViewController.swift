//
//  PopularMoviesViewController.swift
//  PopcornHub
//
//  Created by Diego Escamilla on 27/07/21.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol PopularMoviesDisplayInterface: AnyObject {
	func displayPopularMovies(popularMoviesViewModel: PopularMoviesModels.FetchPopularMovies.ViewModel)
	func displayMovieDetail()
}

class PopularMoviesViewController: UIViewController {
	
	// MARK: - IBOutlets
	
	@IBOutlet private(set) weak var popularMediaCollectionView: UICollectionView!
	@IBOutlet private(set) weak var searchTextField: UITextField!
	
	// MARK: - Properties
	
	var interactor: PopularMoviesInteractorInterface?
	var router: (PopularMoviesRouterInterface & PopularMoviesDataPassing)?
	var viewModel = PopularMoviesModels.FetchPopularMovies.ViewModel()
	
	// MARK: - Init
	
	override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
		super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
		setupVIPCycle()
	}
	
	required init?(coder aDecoder: NSCoder) {
		super.init(coder: aDecoder)
		setupVIPCycle()
	}
	
	// MARK: - Lifecycle
	
	override func viewDidLoad() {
		super.viewDidLoad()
		setupUI()
		fetchMovies()
	}
	
	// MARK: - Setup
	
	private func setupVIPCycle() {
		let viewController = self
		let interactor = PopularMoviesInteractor()
		let presenter = PopularMoviesPresenter()
		let router = PopularMoviesRouter()
		viewController.interactor = interactor
		viewController.router = router
		interactor.presenter = presenter
		presenter.viewController = viewController
		router.viewController = viewController
		router.dataStore = interactor
	}
	
	private func setupUI() {
		title = LocalStrings.PopularMovies.title
		setupNavigationBar()
		setupPopularMediaCollectionView()
	}
	
	private func setupNavigationBar() {
		navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
		navigationController?.navigationBar.shadowImage = UIImage()
		navigationController?.navigationBar.isTranslucent = true
		navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
	}
	
	private func setupPopularMediaCollectionView() {
		popularMediaCollectionView.delegate = self
		popularMediaCollectionView.dataSource = self
		popularMediaCollectionView.contentInset = UIEdgeInsets(top: 16, left: 10, bottom: 16, right: 10)
		popularMediaCollectionView.register(UINib(nibName: NibNames.MediaCollectionCellId, bundle: nil), forCellWithReuseIdentifier: NibNames.MediaCollectionCellId)
	}
	
	// MARK: - Helpers
	
	func fetchMovies() {
		interactor?.fetchPopularMovies()
	}
	
	func performMovieSearch(withString searchString: String?) {
		let request = PopularMoviesModels.SearchMovieDetail.Request(searchString: searchString)
		interactor?.fetchSearchMovies(request: request)
	}
	
	func selectMovie(index: Int) {
		let request = PopularMoviesModels.SelectMovie.Request(index: index)
		interactor?.selectPopularMovie(request: request)
	}
	
	// MARK: - IBActions
	
	@IBAction func didChangeSearchValue(_ sender: Any) {
		performMovieSearch(withString: searchTextField.text)
	}
	
}

// MARK: - PopularMoviesDisplayLogic

extension PopularMoviesViewController: PopularMoviesDisplayInterface {
	func displayPopularMovies(popularMoviesViewModel: PopularMoviesModels.FetchPopularMovies.ViewModel) {
		viewModel = popularMoviesViewModel
		DispatchQueue.main.async {
			self.popularMediaCollectionView.reloadData()
		}
	}
	
	func displayMovieDetail() {
		router?.routToMovieDetail()
	}
}

extension PopularMoviesViewController: UICollectionViewDelegate, UICollectionViewDataSource, UICollectionViewDelegateFlowLayout {
	func collectionView(_ collectionView: UICollectionView, numberOfItemsInSection section: Int) -> Int {
		viewModel.displayableMediaList.count
	}
	
	func collectionView(_ collectionView: UICollectionView, cellForItemAt indexPath: IndexPath) -> UICollectionViewCell {
		guard let cell = collectionView.dequeueReusableCell(withReuseIdentifier: NibNames.MediaCollectionCellId, for: indexPath) as? MediaCollectionViewCell else {
			return UICollectionViewCell()
		}
		let popularMovie = viewModel.displayableMediaList[indexPath.item]
		cell.update(displayableMedia: popularMovie)
		return cell
	}
	
	func collectionView(_ collectionView: UICollectionView, didSelectItemAt indexPath: IndexPath) {
		selectMovie(index: indexPath.item)
	}
	
	func collectionView(_ collectionView: UICollectionView, layout collectionViewLayout: UICollectionViewLayout, sizeForItemAt indexPath: IndexPath) -> CGSize {
		let width = UIScreen.main.bounds.size.width * 0.45
		let height = width * 1.48
		return CGSize(width: width, height: height)
	}
}
