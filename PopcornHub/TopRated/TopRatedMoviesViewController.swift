//
//  TopRatedMoviesViewController.swift
//  PopcornHub
//
//  Created by Diego Escamilla on 27/07/21.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol TopRatedMoviesDisplayInterface: AnyObject {
    func displayTopRatedMovies(topRatedMoviesViewModel: TopRatedMoviesModels.FetchTopRatedMovies.ViewModel)
	func displaySelectedMovie()
}

class TopRatedMoviesViewController: UIViewController {
	// MARK: - IBOutlets
	
	@IBOutlet weak var topRatedTableView: UITableView!
	
	
    // MARK: - Properties
    
    var interactor: TopRatedMoviesInteractorInterface?
    var router: (TopRatedMoviesRouterInterface & TopRatedMoviesDataPassing)?
	var viewModel = TopRatedMoviesModels.FetchTopRatedMovies.ViewModel()
    
    // MARK: - Init

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupVIPCycle()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupVIPCycle()
    }
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        fetchMovies()
    }
    
    // MARK: - Setup
    
    private func setupVIPCycle() {
        let viewController = self
        let interactor = TopRatedMoviesInteractor()
        let presenter = TopRatedMoviesPresenter()
        let router = TopRatedMoviesRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupUI() {
		title = LocalStrings.TopRatedMovies.title
		navigationController?.navigationBar.setBackgroundImage(UIImage(), for: .default)
		navigationController?.navigationBar.shadowImage = UIImage()
		navigationController?.navigationBar.isTranslucent = true
		navigationController?.navigationBar.titleTextAttributes = [NSAttributedString.Key.foregroundColor: UIColor.white]
		setupMediaTableView()
    }
	
	private func setupMediaTableView() {
		topRatedTableView.delegate = self
		topRatedTableView.dataSource = self
		topRatedTableView.register(UINib(nibName: NibNames.MediaTableCellId, bundle: nil), forCellReuseIdentifier: NibNames.MediaTableCellId)
	}
    
    // MARK: - Helpers
    
    func fetchMovies() {
        interactor?.fetchTopRatedMovies()
    }
	
	func selectTopRatedMovie(index: Int) {
		let request = TopRatedMoviesModels.SelectTopRatedMovie.Request(index: index)
		interactor?.selectTopRatedMovie(request: request)
	}
}


// MARK: - TopRatedMoviesDisplayLogic

extension TopRatedMoviesViewController: TopRatedMoviesDisplayInterface {
    func displayTopRatedMovies(topRatedMoviesViewModel: TopRatedMoviesModels.FetchTopRatedMovies.ViewModel) {
		viewModel = topRatedMoviesViewModel
		topRatedTableView.reloadData()
    }
	
	func displaySelectedMovie() {
		router?.routeToMovieDetail()
	}
}

extension TopRatedMoviesViewController: UITableViewDelegate, UITableViewDataSource {
	func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
		viewModel.displayableMediaList.count
	}
	
	func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
		guard let cell = tableView.dequeueReusableCell(withIdentifier: NibNames.MediaTableCellId, for: indexPath) as? MediaTableViewCell else {
			return UITableViewCell()
		}
		let topRatedMovie = viewModel.displayableMediaList[indexPath.item]
		cell.update(displayableMedia: topRatedMovie)
		return cell
	}
	
	func tableView(_ tableView: UITableView, didSelectRowAt indexPath: IndexPath) {
		selectTopRatedMovie(index: indexPath.row)
	}
	
	func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
		170
	}
}
