//
//  UpcomingMoviesInteractor.swift
//  PopcornHub
//
//  Created by Diego Escamilla on 27/07/21.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

protocol UpcomingMoviesInteractorInterface {
    func fetchUpcomingMovies()
	func selectUpcomingMovie(request: UpcomingMoviesModels.SelectUpcomingMovie.Request)
}

protocol UpcomingMoviesDataStore {
	var selectedMovie: MediaResult { get set }
}

class UpcomingMoviesInteractor: UpcomingMoviesInteractorInterface, UpcomingMoviesDataStore {
   
    // MARK: - Properties
    
    var presenter: UpcomingMoviesPresenterInterface?
    var worker: UpcomingMoviesWorkerInterface = UpcomingMoviesWorker()
	var currentPage = 1
	var upcomingMoviesList = [MediaResult]()
	var selectedMovie = MediaResult()
    
    // MARK: - UpcomingMoviesInteractorInterface
    
    func fetchUpcomingMovies() {
		let request = UpcomingMoviesModels.FetchUpcomingMovies.Request(page: currentPage)
		worker.fetchUpcomingMovies(request) { result in
			var response = UpcomingMoviesModels.FetchUpcomingMovies.Response()
			switch result {
				case .success(let moviesResponse):
					let mediaList = moviesResponse?.results ?? [MediaResult]()
					self.upcomingMoviesList = mediaList
					response.mediaList = mediaList
				case .failure(let error):
					response.error = error
			}
			self.presenter?.presentUpcomingMovies(response: response)
		}
    }
	
	func selectUpcomingMovie(request: UpcomingMoviesModels.SelectUpcomingMovie.Request) {
		guard !upcomingMoviesList.isEmpty else { return }
		selectedMovie = upcomingMoviesList[request.index]
		presenter?.presentMovieDetail()
	}
}
