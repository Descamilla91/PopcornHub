//
//  MovieDetailViewController.swift
//  PopcornHub
//
//  Created by Diego Escamilla on 30/07/21.
//
//  This file was generated by the Clean Swift Xcode Templates so
//  you can apply clean architecture to your iOS and Mac projects,
//  see http://clean-swift.com
//

import UIKit

protocol MovieDetailDisplayInterface: AnyObject {
    func displayMovieDetail(viewModel: MovieDetailModels.FetchMovieDetail.ViewModel)
}

class MovieDetailViewController: UIViewController {
    
	// MARK: - IBOutlets
	
	@IBOutlet private(set) weak var contentView: UIView!
	@IBOutlet private(set) weak var posterImageView: UIImageView!
	@IBOutlet private(set) weak var titleValueLabel: UILabel!
	@IBOutlet private(set) weak var languageKeyLabel: UILabel!
	@IBOutlet private(set) weak var languageValueLabel: UILabel!
	@IBOutlet private(set) weak var dateKeyLabel: UILabel!
	@IBOutlet private(set) weak var dateValueLabel: UILabel!
	@IBOutlet private(set) weak var totalVotesKeyLabel: UILabel!
	@IBOutlet private(set) weak var totalVotesValueLabel: UILabel!
	@IBOutlet private(set) weak var averageVotesKeyLabel: UILabel!
	@IBOutlet private(set) weak var avergageVotesValueLabel: UILabel!
	@IBOutlet private(set) weak var overviewTextView: UITextView!
	
	
    // MARK: - Properties
    
    var interactor: MovieDetailInteractorInterface?
    var router: (MovieDetailRouterInterface & MovieDetailDataPassing)?
    
    // MARK: - Init

    override init(nibName nibNameOrNil: String?, bundle nibBundleOrNil: Bundle?) {
        super.init(nibName: nibNameOrNil, bundle: nibBundleOrNil)
        setupVIPCycle()
    }
    
    required init?(coder aDecoder: NSCoder) {
        super.init(coder: aDecoder)
        setupVIPCycle()
    }
    
    // MARK: - Lifecycle
    
    override func viewDidLoad() {
        super.viewDidLoad()
        setupUI()
        performRequest()
    }
    
    // MARK: - Setup
    
    private func setupVIPCycle() {
        let viewController = self
        let interactor = MovieDetailInteractor()
        let presenter = MovieDetailPresenter()
        let router = MovieDetailRouter()
        viewController.interactor = interactor
        viewController.router = router
        interactor.presenter = presenter
        presenter.viewController = viewController
        router.viewController = viewController
        router.dataStore = interactor
    }
    
    private func setupUI() {
		contentView.layer.cornerRadius = 5.0
		contentView.layer.borderWidth = 4.0
		contentView.layer.borderColor = UIColor.white.cgColor
        setupKeyLabels()
    }
	
	private func setupKeyLabels() {
		languageKeyLabel.text = LocalStrings.Detail.languageKey
		dateKeyLabel.text = LocalStrings.Detail.dateKey
		averageVotesKeyLabel.text = LocalStrings.Detail.averageVotesKey
		totalVotesKeyLabel.text = LocalStrings.Detail.totalVotesKey
	}
    
    // MARK: - Helpers
    
    func performRequest() {
        interactor?.fetchMovieDetail()
    }
}


// MARK: - MovieDetailDisplayLogic

extension MovieDetailViewController: MovieDetailDisplayInterface {
    func displayMovieDetail(viewModel: MovieDetailModels.FetchMovieDetail.ViewModel) {
		titleValueLabel.text = viewModel.title
		languageValueLabel.text = viewModel.language
		dateValueLabel.text = viewModel.date
		avergageVotesValueLabel.text = viewModel.averageVotes
		totalVotesValueLabel.text = viewModel.totalVotes
		if let backdropImageUrl = URL(string: viewModel.backdropImage.TMDBImageUrl(size: .h632)) {
			posterImageView.kf.setImage(with: backdropImageUrl, placeholder: LocalImages.Common.placeHolder)
		}
		overviewTextView.text = viewModel.overview
    }
}
